#!/usr/bin/env bash


dwatch () {
  MONITORDIR="./"
  inotifywait --excludei '.git/**/*' \
    -mre modify,move,close_write,create,delete,delete_self "${MONITORDIR}" | \
    while read FILECHANGE
  do
    [ -z $PROG_PID ] && echo "no program to kill yet" || kill $PROD_PID
    # change to match the desired app below
    gunicorn --bind 0.0.0.0:8000 -w=1 server.server &
    PROG_PID=$!
}
[ "$1" = "watch" ] && dwatch && exit

## --- LET ONLY PROJECTOWNERS OR CERTIFIED ENGINEERS COMMIT TO THIS FILE ---
## Source this script to use it
## Source from project root unless your change PROJECT_ROOT to abspath

#export CONTAINER_WORK_DIR=/app
#export CONTAINER_EXPOSED_PORTS="5000:5000"
IS_SET=${CONTAINER_WORK_DIR?SOURCEME: Must provide container work directory}
IS_SET=${CONTAINER_EXPOSED_PORTS?SOURCEME: Must provide container exposed ports}

# Some project configurations
# export PROJECT_NAME="untitled_project"
IS_SET=${PROJECT_NAME?SOURCEME: Must set projectname}
export PROJECT_ROOT=$(pwd)  # Change this to proj absolute path if you want
export RUNNING_LOCAL=TRUE
export APP_WORKING_TMP_DIR=$(mktemp -d)
export DOCKERFILE_PATH=$PROJECT_ROOT/app/  # Where the dockerfile resides

# KMS Configs
# export ENABLE_KMS=1
export KMS_PROJECT='untitled_google_project'
export SECRETFILE_PATH=$PROJECT_ROOT/data/
export SECRETFILE_OUT_PATH=$(mktemp -d)
export SECRETFILE=servicekey.json
export KMS_LOC='europe-north1'
# export KMS_KEYRING=''
# export KMS_KEY='' # Ask sysadmin for help here

# Docker configurations
CONTAINER_NAME=$PROJECT_NAME
TAG_BASE=eu.gcr.io/amedia-analytics-eu/$PROJECT_NAME/app
TAG_V_DEFAULT=dirty

# Unset the IS_SET to be tidy
unset IS_SET

ddebug () {
  echo "DDEBUG: Running script with configurations :"
  echo "
    RUNNING_LOCAL : $RUNNING_LOCAL
    PROJECT_ROOT : $PROJECT_ROOT
    APP_WORKING_TMP_DIR : $APP_WORKING_TMP_DIR
    DOCKERFILE_PATH : $DOCKERFILE_PATH
    CONTAINER_NAME : $CONTAINER_NAME
    TAG_BASE:TAG_V_DEFAULT : $TAG_BASE:$TAG_V_DEFAULT
  "
  if [ $ENABLE_KMS = 1 ]; then
    echo "
    KMS_PROJECT : $KMS_PROJECT
    KMS_SECRETFILE : $SECRETFILE
    KMS_SECRETFILE_PATH : $SECRETFILE_PATH
    KMS_SECRETFILE_OUT_PATH : $SECRETFILE_OUT_PATH
    KMS_LOCATION : $KMS_LOC
    KMS_KEYRING : $KMS_KEYRING
    KMS_KEY : $KMS_KEY
    "
  else 
    echo "
    KMS_ENABLED : False
    "
  fi
}

dkms () {
  echo "DKMS: Decrypting key to tmp directory"
  gcloud --project=$KMS_PROJECT kms decrypt \
         --ciphertext-file=$SECRETFILE_PATH/$SECRETFILE.enc \
         --plaintext-file=$SECRETFILE_OUT_PATH/$SECRETFILE \
         --location=$KMS_LOC \
         --keyring=$KMS_KEYRING \
         --key=$KMS_KEY
}

dbuild () {
  ddebug
  TAG=$TAG_BASE:${1:-$TAG_V_DEFAULT}
  TARGET=${2?DBUILD: Must provide a target stage to build!}
  echo "DBUILD: Proceeding to build the image : \n\tImage: $TAG\n\tTarget: $TARGET" 
  docker build --target $TARGET -t $TAG $DOCKERFILE_PATH
}

drel () {
  # May need gcloud auth login && gcloud auth configure-docker first
  TAG=$TAG_BASE:${1?DREL: Must provide release version}
  echo "Will now proceed to build and push $TAG"
  read -p "Press enter to continue"
  LATEST_TAG=$TAG_BASE:'latest'
  echo "DREL: Proceeding to build and release : \n\t$TAG\n\t$LATEST_TAG"
  dbuild $1 prod
  docker tag $TAG $LATEST_TAG
  docker push $TAG
  docker push $LATEST_TAG
}

ddev () {
  echo "DDEV: Setting up devenv"
  APPTYPE=${1:-app}
  TAG=$TAG_BASE:${2:-$TAG_V_DEFAULT}
  dbuild ${2:-$TAG_V_DEFAULT} prod
  if [ ENABLE_KMS=1 ]; then dkms; fi

  echo "DDEV: Dev docker image built - Proceeding to run the dev container"
  # Change the cmdargs to whatever executes the app
  [ "$APPTYPE" = "app" ] && cmdargs='bash sourceme watch' || cmdargs='/bin/bash'
  docker run --rm \
             --entrypoint="" \
             --volume $PROJECT_ROOT:$CONTAINER_WORK_DIR \
             --volume $SECRETFILE_OUT_PATH:$SECRETFILE_OUT_PATH \
             -e GOOGLE_APPLICATION_CREDENTIALS=$SECRETFILE_OUT_PATH/$SECRETFILE \
             -e PYTHONPATH=$CONTAINER_WORK_DIR/ \
             -w=$CONTAINER_WORK_DIR \
             -p $CONTAINER_EXPOSED_PORTS \
             --name $CONTAINER_NAME \
             --entrypoint="/bin/bash" \
             -it \
             $TAG -c $cmdargs
  echo "DDEV: Container exited - Shredding the private key"
  shred -f -zu $SECRETFILE_OUT_PATH/$SECRETFILE
}

: '
Getting started with this script:
=================================

Note that this setup had probably been already done for you by
sysadmin

1. Configure all the configs at the top till the script runs
2. Get a private key for a serviceaccount and encrypt it:
    $ mv ~/Downloads/<privatekey>.json $SECRETFILE_PATH/$SECRETFILE
    $ gcloud --project=$KMS_PROJECT encrypt \
             --location=$KMS_LOC \
             --keyring=$KMS_KEYRING \
             --key=$KMS_KEY \
             --ciphertext-file=$SECRETFILE_PATH/$SECRETFILE.enc \
             --plaintext-file=$SECRETFILE_PATH/$SECRETFILE
    $ shred -f -zu $SECRETFILE_PATH/$SECRETFILE # Delete the original file
    $ git add $SECRETFILE_PATH/$SECRETFILE.enc # Commit the encrypted file
    $ git commit -m "feat: added encrypted private key"

TO WATCH FS:
3. Install inofitywait inside the container
4. run ddev in watch mode `$ ddev watch` or run sourceme with watch argument `sourceme watch`
'
